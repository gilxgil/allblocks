/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.exportSymbol('proto.lavanet.lava.spec.Api', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.ApiCollection', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.BlockParser', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.CollectionData', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.EXTENSION', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.Extension', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.FUNCTION_TAG', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.Header', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.Header.HeaderType', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.PARSER_FUNC', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.ParseDirective', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.ParseValue', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.Rule', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.SpecCategory', null, global);
goog.exportSymbol('proto.lavanet.lava.spec.Verification', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.ApiCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lavanet.lava.spec.ApiCollection.repeatedFields_, null);
};
goog.inherits(proto.lavanet.lava.spec.ApiCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.ApiCollection.displayName = 'proto.lavanet.lava.spec.ApiCollection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lavanet.lava.spec.ApiCollection.repeatedFields_ = [3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.ApiCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.ApiCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ApiCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    collectionData: (f = msg.getCollectionData()) && proto.lavanet.lava.spec.CollectionData.toObject(includeInstance, f),
    apisList: jspb.Message.toObjectList(msg.getApisList(),
    proto.lavanet.lava.spec.Api.toObject, includeInstance),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.lavanet.lava.spec.Header.toObject, includeInstance),
    inheritanceApisList: jspb.Message.toObjectList(msg.getInheritanceApisList(),
    proto.lavanet.lava.spec.CollectionData.toObject, includeInstance),
    parseDirectivesList: jspb.Message.toObjectList(msg.getParseDirectivesList(),
    proto.lavanet.lava.spec.ParseDirective.toObject, includeInstance),
    extensionsList: jspb.Message.toObjectList(msg.getExtensionsList(),
    proto.lavanet.lava.spec.Extension.toObject, includeInstance),
    verificationsList: jspb.Message.toObjectList(msg.getVerificationsList(),
    proto.lavanet.lava.spec.Verification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.ApiCollection}
 */
proto.lavanet.lava.spec.ApiCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.ApiCollection;
  return proto.lavanet.lava.spec.ApiCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.ApiCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.ApiCollection}
 */
proto.lavanet.lava.spec.ApiCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = new proto.lavanet.lava.spec.CollectionData;
      reader.readMessage(value,proto.lavanet.lava.spec.CollectionData.deserializeBinaryFromReader);
      msg.setCollectionData(value);
      break;
    case 3:
      var value = new proto.lavanet.lava.spec.Api;
      reader.readMessage(value,proto.lavanet.lava.spec.Api.deserializeBinaryFromReader);
      msg.addApis(value);
      break;
    case 4:
      var value = new proto.lavanet.lava.spec.Header;
      reader.readMessage(value,proto.lavanet.lava.spec.Header.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 5:
      var value = new proto.lavanet.lava.spec.CollectionData;
      reader.readMessage(value,proto.lavanet.lava.spec.CollectionData.deserializeBinaryFromReader);
      msg.addInheritanceApis(value);
      break;
    case 6:
      var value = new proto.lavanet.lava.spec.ParseDirective;
      reader.readMessage(value,proto.lavanet.lava.spec.ParseDirective.deserializeBinaryFromReader);
      msg.addParseDirectives(value);
      break;
    case 7:
      var value = new proto.lavanet.lava.spec.Extension;
      reader.readMessage(value,proto.lavanet.lava.spec.Extension.deserializeBinaryFromReader);
      msg.addExtensions(value);
      break;
    case 8:
      var value = new proto.lavanet.lava.spec.Verification;
      reader.readMessage(value,proto.lavanet.lava.spec.Verification.deserializeBinaryFromReader);
      msg.addVerifications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.ApiCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.ApiCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ApiCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCollectionData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lavanet.lava.spec.CollectionData.serializeBinaryToWriter
    );
  }
  f = message.getApisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lavanet.lava.spec.Api.serializeBinaryToWriter
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.lavanet.lava.spec.Header.serializeBinaryToWriter
    );
  }
  f = message.getInheritanceApisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lavanet.lava.spec.CollectionData.serializeBinaryToWriter
    );
  }
  f = message.getParseDirectivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.lavanet.lava.spec.ParseDirective.serializeBinaryToWriter
    );
  }
  f = message.getExtensionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.lavanet.lava.spec.Extension.serializeBinaryToWriter
    );
  }
  f = message.getVerificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.lavanet.lava.spec.Verification.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional CollectionData collection_data = 2;
 * @return {?proto.lavanet.lava.spec.CollectionData}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getCollectionData = function() {
  return /** @type{?proto.lavanet.lava.spec.CollectionData} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.CollectionData, 2));
};


/** @param {?proto.lavanet.lava.spec.CollectionData|undefined} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setCollectionData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearCollectionData = function() {
  this.setCollectionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.hasCollectionData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Api apis = 3;
 * @return {!Array<!proto.lavanet.lava.spec.Api>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getApisList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.Api>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.Api, 3));
};


/** @param {!Array<!proto.lavanet.lava.spec.Api>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setApisList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lavanet.lava.spec.Api=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.Api}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addApis = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lavanet.lava.spec.Api, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearApisList = function() {
  this.setApisList([]);
};


/**
 * repeated Header headers = 4;
 * @return {!Array<!proto.lavanet.lava.spec.Header>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.Header, 4));
};


/** @param {!Array<!proto.lavanet.lava.spec.Header>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lavanet.lava.spec.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.Header}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lavanet.lava.spec.Header, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearHeadersList = function() {
  this.setHeadersList([]);
};


/**
 * repeated CollectionData inheritance_apis = 5;
 * @return {!Array<!proto.lavanet.lava.spec.CollectionData>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getInheritanceApisList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.CollectionData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.CollectionData, 5));
};


/** @param {!Array<!proto.lavanet.lava.spec.CollectionData>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setInheritanceApisList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lavanet.lava.spec.CollectionData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.CollectionData}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addInheritanceApis = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lavanet.lava.spec.CollectionData, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearInheritanceApisList = function() {
  this.setInheritanceApisList([]);
};


/**
 * repeated ParseDirective parse_directives = 6;
 * @return {!Array<!proto.lavanet.lava.spec.ParseDirective>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getParseDirectivesList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.ParseDirective>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.ParseDirective, 6));
};


/** @param {!Array<!proto.lavanet.lava.spec.ParseDirective>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setParseDirectivesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.lavanet.lava.spec.ParseDirective=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.ParseDirective}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addParseDirectives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.lavanet.lava.spec.ParseDirective, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearParseDirectivesList = function() {
  this.setParseDirectivesList([]);
};


/**
 * repeated Extension extensions = 7;
 * @return {!Array<!proto.lavanet.lava.spec.Extension>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getExtensionsList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.Extension>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.Extension, 7));
};


/** @param {!Array<!proto.lavanet.lava.spec.Extension>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setExtensionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.lavanet.lava.spec.Extension=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.Extension}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addExtensions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.lavanet.lava.spec.Extension, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearExtensionsList = function() {
  this.setExtensionsList([]);
};


/**
 * repeated Verification verifications = 8;
 * @return {!Array<!proto.lavanet.lava.spec.Verification>}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.getVerificationsList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.Verification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.Verification, 8));
};


/** @param {!Array<!proto.lavanet.lava.spec.Verification>} value */
proto.lavanet.lava.spec.ApiCollection.prototype.setVerificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.lavanet.lava.spec.Verification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.Verification}
 */
proto.lavanet.lava.spec.ApiCollection.prototype.addVerifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.lavanet.lava.spec.Verification, opt_index);
};


proto.lavanet.lava.spec.ApiCollection.prototype.clearVerificationsList = function() {
  this.setVerificationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.Extension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.Extension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.Extension.displayName = 'proto.lavanet.lava.spec.Extension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.Extension.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.Extension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.Extension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Extension.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cuMultiplier: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    rule: (f = msg.getRule()) && proto.lavanet.lava.spec.Rule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.Extension}
 */
proto.lavanet.lava.spec.Extension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.Extension;
  return proto.lavanet.lava.spec.Extension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.Extension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.Extension}
 */
proto.lavanet.lava.spec.Extension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCuMultiplier(value);
      break;
    case 3:
      var value = new proto.lavanet.lava.spec.Rule;
      reader.readMessage(value,proto.lavanet.lava.spec.Rule.deserializeBinaryFromReader);
      msg.setRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.Extension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.Extension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.Extension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Extension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCuMultiplier();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRule();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lavanet.lava.spec.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lavanet.lava.spec.Extension.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.Extension.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float cu_multiplier = 2;
 * @return {number}
 */
proto.lavanet.lava.spec.Extension.prototype.getCuMultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.lavanet.lava.spec.Extension.prototype.setCuMultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Rule rule = 3;
 * @return {?proto.lavanet.lava.spec.Rule}
 */
proto.lavanet.lava.spec.Extension.prototype.getRule = function() {
  return /** @type{?proto.lavanet.lava.spec.Rule} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.Rule, 3));
};


/** @param {?proto.lavanet.lava.spec.Rule|undefined} value */
proto.lavanet.lava.spec.Extension.prototype.setRule = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lavanet.lava.spec.Extension.prototype.clearRule = function() {
  this.setRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.Extension.prototype.hasRule = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.Rule.displayName = 'proto.lavanet.lava.spec.Rule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.Rule}
 */
proto.lavanet.lava.spec.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.Rule;
  return proto.lavanet.lava.spec.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.Rule}
 */
proto.lavanet.lava.spec.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 block = 1;
 * @return {number}
 */
proto.lavanet.lava.spec.Rule.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lavanet.lava.spec.Rule.prototype.setBlock = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.Verification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lavanet.lava.spec.Verification.repeatedFields_, null);
};
goog.inherits(proto.lavanet.lava.spec.Verification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.Verification.displayName = 'proto.lavanet.lava.spec.Verification';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lavanet.lava.spec.Verification.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.Verification.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.Verification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.Verification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Verification.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parseDirective: (f = msg.getParseDirective()) && proto.lavanet.lava.spec.ParseDirective.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.lavanet.lava.spec.ParseValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.Verification}
 */
proto.lavanet.lava.spec.Verification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.Verification;
  return proto.lavanet.lava.spec.Verification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.Verification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.Verification}
 */
proto.lavanet.lava.spec.Verification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.lavanet.lava.spec.ParseDirective;
      reader.readMessage(value,proto.lavanet.lava.spec.ParseDirective.deserializeBinaryFromReader);
      msg.setParseDirective(value);
      break;
    case 3:
      var value = new proto.lavanet.lava.spec.ParseValue;
      reader.readMessage(value,proto.lavanet.lava.spec.ParseValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.Verification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.Verification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.Verification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Verification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParseDirective();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lavanet.lava.spec.ParseDirective.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lavanet.lava.spec.ParseValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lavanet.lava.spec.Verification.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.Verification.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ParseDirective parse_directive = 2;
 * @return {?proto.lavanet.lava.spec.ParseDirective}
 */
proto.lavanet.lava.spec.Verification.prototype.getParseDirective = function() {
  return /** @type{?proto.lavanet.lava.spec.ParseDirective} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.ParseDirective, 2));
};


/** @param {?proto.lavanet.lava.spec.ParseDirective|undefined} value */
proto.lavanet.lava.spec.Verification.prototype.setParseDirective = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lavanet.lava.spec.Verification.prototype.clearParseDirective = function() {
  this.setParseDirective(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.Verification.prototype.hasParseDirective = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ParseValue values = 3;
 * @return {!Array<!proto.lavanet.lava.spec.ParseValue>}
 */
proto.lavanet.lava.spec.Verification.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.lavanet.lava.spec.ParseValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lavanet.lava.spec.ParseValue, 3));
};


/** @param {!Array<!proto.lavanet.lava.spec.ParseValue>} value */
proto.lavanet.lava.spec.Verification.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lavanet.lava.spec.ParseValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lavanet.lava.spec.ParseValue}
 */
proto.lavanet.lava.spec.Verification.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lavanet.lava.spec.ParseValue, opt_index);
};


proto.lavanet.lava.spec.Verification.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.ParseValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.ParseValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.ParseValue.displayName = 'proto.lavanet.lava.spec.ParseValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.ParseValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.ParseValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.ParseValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ParseValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    extension: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expectedValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    latestDistance: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.ParseValue}
 */
proto.lavanet.lava.spec.ParseValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.ParseValue;
  return proto.lavanet.lava.spec.ParseValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.ParseValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.ParseValue}
 */
proto.lavanet.lava.spec.ParseValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtension$(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpectedValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.ParseValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.ParseValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.ParseValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ParseValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtension$();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpectedValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLatestDistance();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string extension = 1;
 * @return {string}
 */
proto.lavanet.lava.spec.ParseValue.prototype.getExtension$ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.ParseValue.prototype.setExtension$ = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expected_value = 2;
 * @return {string}
 */
proto.lavanet.lava.spec.ParseValue.prototype.getExpectedValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.ParseValue.prototype.setExpectedValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 latest_distance = 3;
 * @return {number}
 */
proto.lavanet.lava.spec.ParseValue.prototype.getLatestDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lavanet.lava.spec.ParseValue.prototype.setLatestDistance = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.CollectionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.CollectionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.CollectionData.displayName = 'proto.lavanet.lava.spec.CollectionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.CollectionData.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.CollectionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.CollectionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.CollectionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiInterface: jspb.Message.getFieldWithDefault(msg, 1, ""),
    internalPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    addOn: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.CollectionData}
 */
proto.lavanet.lava.spec.CollectionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.CollectionData;
  return proto.lavanet.lava.spec.CollectionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.CollectionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.CollectionData}
 */
proto.lavanet.lava.spec.CollectionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.CollectionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.CollectionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.CollectionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.CollectionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiInterface();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInternalPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddOn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string api_interface = 1;
 * @return {string}
 */
proto.lavanet.lava.spec.CollectionData.prototype.getApiInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.CollectionData.prototype.setApiInterface = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string internal_path = 2;
 * @return {string}
 */
proto.lavanet.lava.spec.CollectionData.prototype.getInternalPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.CollectionData.prototype.setInternalPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.lavanet.lava.spec.CollectionData.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.CollectionData.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string add_on = 4;
 * @return {string}
 */
proto.lavanet.lava.spec.CollectionData.prototype.getAddOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.CollectionData.prototype.setAddOn = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.Header.displayName = 'proto.lavanet.lava.spec.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    functionTag: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.Header}
 */
proto.lavanet.lava.spec.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.Header;
  return proto.lavanet.lava.spec.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.Header}
 */
proto.lavanet.lava.spec.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.lavanet.lava.spec.Header.HeaderType} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {!proto.lavanet.lava.spec.FUNCTION_TAG} */ (reader.readEnum());
      msg.setFunctionTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFunctionTag();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lavanet.lava.spec.Header.HeaderType = {
  PASS_SEND: 0,
  PASS_REPLY: 1,
  PASS_BOTH: 2,
  PASS_IGNORE: 3
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.lavanet.lava.spec.Header.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.Header.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional HeaderType kind = 2;
 * @return {!proto.lavanet.lava.spec.Header.HeaderType}
 */
proto.lavanet.lava.spec.Header.prototype.getKind = function() {
  return /** @type {!proto.lavanet.lava.spec.Header.HeaderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.lavanet.lava.spec.Header.HeaderType} value */
proto.lavanet.lava.spec.Header.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional FUNCTION_TAG function_tag = 3;
 * @return {!proto.lavanet.lava.spec.FUNCTION_TAG}
 */
proto.lavanet.lava.spec.Header.prototype.getFunctionTag = function() {
  return /** @type {!proto.lavanet.lava.spec.FUNCTION_TAG} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.lavanet.lava.spec.FUNCTION_TAG} value */
proto.lavanet.lava.spec.Header.prototype.setFunctionTag = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.Api = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.Api, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.Api.displayName = 'proto.lavanet.lava.spec.Api';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.Api.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.Api.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.Api} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Api.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    computeUnits: jspb.Message.getFieldWithDefault(msg, 3, 0),
    extraComputeUnits: jspb.Message.getFieldWithDefault(msg, 4, 0),
    category: (f = msg.getCategory()) && proto.lavanet.lava.spec.SpecCategory.toObject(includeInstance, f),
    blockParsing: (f = msg.getBlockParsing()) && proto.lavanet.lava.spec.BlockParser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.Api}
 */
proto.lavanet.lava.spec.Api.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.Api;
  return proto.lavanet.lava.spec.Api.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.Api} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.Api}
 */
proto.lavanet.lava.spec.Api.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setComputeUnits(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExtraComputeUnits(value);
      break;
    case 6:
      var value = new proto.lavanet.lava.spec.SpecCategory;
      reader.readMessage(value,proto.lavanet.lava.spec.SpecCategory.deserializeBinaryFromReader);
      msg.setCategory(value);
      break;
    case 7:
      var value = new proto.lavanet.lava.spec.BlockParser;
      reader.readMessage(value,proto.lavanet.lava.spec.BlockParser.deserializeBinaryFromReader);
      msg.setBlockParsing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.Api.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.Api.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.Api} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.Api.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComputeUnits();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExtraComputeUnits();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCategory();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lavanet.lava.spec.SpecCategory.serializeBinaryToWriter
    );
  }
  f = message.getBlockParsing();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.lavanet.lava.spec.BlockParser.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.Api.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.Api.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.lavanet.lava.spec.Api.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.Api.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 compute_units = 3;
 * @return {number}
 */
proto.lavanet.lava.spec.Api.prototype.getComputeUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lavanet.lava.spec.Api.prototype.setComputeUnits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 extra_compute_units = 4;
 * @return {number}
 */
proto.lavanet.lava.spec.Api.prototype.getExtraComputeUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.lavanet.lava.spec.Api.prototype.setExtraComputeUnits = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SpecCategory category = 6;
 * @return {?proto.lavanet.lava.spec.SpecCategory}
 */
proto.lavanet.lava.spec.Api.prototype.getCategory = function() {
  return /** @type{?proto.lavanet.lava.spec.SpecCategory} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.SpecCategory, 6));
};


/** @param {?proto.lavanet.lava.spec.SpecCategory|undefined} value */
proto.lavanet.lava.spec.Api.prototype.setCategory = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.lavanet.lava.spec.Api.prototype.clearCategory = function() {
  this.setCategory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.Api.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BlockParser block_parsing = 7;
 * @return {?proto.lavanet.lava.spec.BlockParser}
 */
proto.lavanet.lava.spec.Api.prototype.getBlockParsing = function() {
  return /** @type{?proto.lavanet.lava.spec.BlockParser} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.BlockParser, 7));
};


/** @param {?proto.lavanet.lava.spec.BlockParser|undefined} value */
proto.lavanet.lava.spec.Api.prototype.setBlockParsing = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.lavanet.lava.spec.Api.prototype.clearBlockParsing = function() {
  this.setBlockParsing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.Api.prototype.hasBlockParsing = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.ParseDirective = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.ParseDirective, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.ParseDirective.displayName = 'proto.lavanet.lava.spec.ParseDirective';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.ParseDirective.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.ParseDirective} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ParseDirective.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionTag: jspb.Message.getFieldWithDefault(msg, 1, 0),
    functionTemplate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultParsing: (f = msg.getResultParsing()) && proto.lavanet.lava.spec.BlockParser.toObject(includeInstance, f),
    apiName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.ParseDirective}
 */
proto.lavanet.lava.spec.ParseDirective.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.ParseDirective;
  return proto.lavanet.lava.spec.ParseDirective.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.ParseDirective} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.ParseDirective}
 */
proto.lavanet.lava.spec.ParseDirective.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lavanet.lava.spec.FUNCTION_TAG} */ (reader.readEnum());
      msg.setFunctionTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionTemplate(value);
      break;
    case 3:
      var value = new proto.lavanet.lava.spec.BlockParser;
      reader.readMessage(value,proto.lavanet.lava.spec.BlockParser.deserializeBinaryFromReader);
      msg.setResultParsing(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.ParseDirective.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.ParseDirective} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.ParseDirective.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionTag();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFunctionTemplate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultParsing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lavanet.lava.spec.BlockParser.serializeBinaryToWriter
    );
  }
  f = message.getApiName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional FUNCTION_TAG function_tag = 1;
 * @return {!proto.lavanet.lava.spec.FUNCTION_TAG}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.getFunctionTag = function() {
  return /** @type {!proto.lavanet.lava.spec.FUNCTION_TAG} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.lavanet.lava.spec.FUNCTION_TAG} value */
proto.lavanet.lava.spec.ParseDirective.prototype.setFunctionTag = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string function_template = 2;
 * @return {string}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.getFunctionTemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.ParseDirective.prototype.setFunctionTemplate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BlockParser result_parsing = 3;
 * @return {?proto.lavanet.lava.spec.BlockParser}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.getResultParsing = function() {
  return /** @type{?proto.lavanet.lava.spec.BlockParser} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.spec.BlockParser, 3));
};


/** @param {?proto.lavanet.lava.spec.BlockParser|undefined} value */
proto.lavanet.lava.spec.ParseDirective.prototype.setResultParsing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lavanet.lava.spec.ParseDirective.prototype.clearResultParsing = function() {
  this.setResultParsing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.hasResultParsing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string api_name = 4;
 * @return {string}
 */
proto.lavanet.lava.spec.ParseDirective.prototype.getApiName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.ParseDirective.prototype.setApiName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.BlockParser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lavanet.lava.spec.BlockParser.repeatedFields_, null);
};
goog.inherits(proto.lavanet.lava.spec.BlockParser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.BlockParser.displayName = 'proto.lavanet.lava.spec.BlockParser';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lavanet.lava.spec.BlockParser.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.BlockParser.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.BlockParser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.BlockParser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.BlockParser.toObject = function(includeInstance, msg) {
  var f, obj = {
    parserArgList: jspb.Message.getRepeatedField(msg, 1),
    parserFunc: jspb.Message.getFieldWithDefault(msg, 2, 0),
    defaultValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    encoding: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.BlockParser}
 */
proto.lavanet.lava.spec.BlockParser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.BlockParser;
  return proto.lavanet.lava.spec.BlockParser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.BlockParser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.BlockParser}
 */
proto.lavanet.lava.spec.BlockParser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addParserArg(value);
      break;
    case 2:
      var value = /** @type {!proto.lavanet.lava.spec.PARSER_FUNC} */ (reader.readEnum());
      msg.setParserFunc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.BlockParser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.BlockParser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.BlockParser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.BlockParser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParserArgList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getParserFunc();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEncoding();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated string parser_arg = 1;
 * @return {!Array<string>}
 */
proto.lavanet.lava.spec.BlockParser.prototype.getParserArgList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.lavanet.lava.spec.BlockParser.prototype.setParserArgList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.lavanet.lava.spec.BlockParser.prototype.addParserArg = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.lavanet.lava.spec.BlockParser.prototype.clearParserArgList = function() {
  this.setParserArgList([]);
};


/**
 * optional PARSER_FUNC parser_func = 2;
 * @return {!proto.lavanet.lava.spec.PARSER_FUNC}
 */
proto.lavanet.lava.spec.BlockParser.prototype.getParserFunc = function() {
  return /** @type {!proto.lavanet.lava.spec.PARSER_FUNC} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.lavanet.lava.spec.PARSER_FUNC} value */
proto.lavanet.lava.spec.BlockParser.prototype.setParserFunc = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string default_value = 3;
 * @return {string}
 */
proto.lavanet.lava.spec.BlockParser.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.BlockParser.prototype.setDefaultValue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string encoding = 4;
 * @return {string}
 */
proto.lavanet.lava.spec.BlockParser.prototype.getEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lavanet.lava.spec.BlockParser.prototype.setEncoding = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.spec.SpecCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.spec.SpecCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.spec.SpecCategory.displayName = 'proto.lavanet.lava.spec.SpecCategory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.spec.SpecCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.spec.SpecCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.SpecCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    deterministic: jspb.Message.getFieldWithDefault(msg, 1, false),
    local: jspb.Message.getFieldWithDefault(msg, 2, false),
    subscription: jspb.Message.getFieldWithDefault(msg, 3, false),
    stateful: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hangingApi: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.spec.SpecCategory}
 */
proto.lavanet.lava.spec.SpecCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.spec.SpecCategory;
  return proto.lavanet.lava.spec.SpecCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.spec.SpecCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.spec.SpecCategory}
 */
proto.lavanet.lava.spec.SpecCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeterministic(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocal(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStateful(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHangingApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.spec.SpecCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.spec.SpecCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.spec.SpecCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeterministic();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLocal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSubscription();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStateful();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHangingApi();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool deterministic = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.getDeterministic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.SpecCategory.prototype.setDeterministic = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool local = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.getLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.SpecCategory.prototype.setLocal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool subscription = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.getSubscription = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.SpecCategory.prototype.setSubscription = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 stateful = 4;
 * @return {number}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.getStateful = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.lavanet.lava.spec.SpecCategory.prototype.setStateful = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool hanging_api = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lavanet.lava.spec.SpecCategory.prototype.getHangingApi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.lavanet.lava.spec.SpecCategory.prototype.setHangingApi = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.lavanet.lava.spec.EXTENSION = {
  NONE: 0,
  ARCHIVE: 1
};

/**
 * @enum {number}
 */
proto.lavanet.lava.spec.FUNCTION_TAG = {
  DISABLED: 0,
  GET_BLOCKNUM: 1,
  GET_BLOCK_BY_NUM: 2,
  SET_LATEST_IN_METADATA: 3,
  SET_LATEST_IN_BODY: 4,
  VERIFICATION: 5
};

/**
 * @enum {number}
 */
proto.lavanet.lava.spec.PARSER_FUNC = {
  EMPTY: 0,
  PARSE_BY_ARG: 1,
  PARSE_CANONICAL: 2,
  PARSE_DICTIONARY: 3,
  PARSE_DICTIONARY_OR_ORDERED: 4,
  DEFAULT: 6
};

goog.object.extend(exports, proto.lavanet.lava.spec);
