/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
var lavanet_lava_pairing_relay_pb = require('../../../lavanet/lava/pairing/relay_pb.js');
goog.exportSymbol('proto.lavanet.lava.conflict.ConflictRelayData', null, global);
goog.exportSymbol('proto.lavanet.lava.conflict.FinalizationConflict', null, global);
goog.exportSymbol('proto.lavanet.lava.conflict.ReplyMetadata', null, global);
goog.exportSymbol('proto.lavanet.lava.conflict.ResponseConflict', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.conflict.ResponseConflict = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.conflict.ResponseConflict, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.conflict.ResponseConflict.displayName = 'proto.lavanet.lava.conflict.ResponseConflict';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.conflict.ResponseConflict.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.conflict.ResponseConflict} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ResponseConflict.toObject = function(includeInstance, msg) {
  var f, obj = {
    conflictrelaydata0: (f = msg.getConflictrelaydata0()) && proto.lavanet.lava.conflict.ConflictRelayData.toObject(includeInstance, f),
    conflictrelaydata1: (f = msg.getConflictrelaydata1()) && proto.lavanet.lava.conflict.ConflictRelayData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.conflict.ResponseConflict}
 */
proto.lavanet.lava.conflict.ResponseConflict.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.conflict.ResponseConflict;
  return proto.lavanet.lava.conflict.ResponseConflict.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.conflict.ResponseConflict} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.conflict.ResponseConflict}
 */
proto.lavanet.lava.conflict.ResponseConflict.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lavanet.lava.conflict.ConflictRelayData;
      reader.readMessage(value,proto.lavanet.lava.conflict.ConflictRelayData.deserializeBinaryFromReader);
      msg.setConflictrelaydata0(value);
      break;
    case 2:
      var value = new proto.lavanet.lava.conflict.ConflictRelayData;
      reader.readMessage(value,proto.lavanet.lava.conflict.ConflictRelayData.deserializeBinaryFromReader);
      msg.setConflictrelaydata1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.conflict.ResponseConflict.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.conflict.ResponseConflict} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ResponseConflict.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConflictrelaydata0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lavanet.lava.conflict.ConflictRelayData.serializeBinaryToWriter
    );
  }
  f = message.getConflictrelaydata1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lavanet.lava.conflict.ConflictRelayData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConflictRelayData conflictRelayData0 = 1;
 * @return {?proto.lavanet.lava.conflict.ConflictRelayData}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.getConflictrelaydata0 = function() {
  return /** @type{?proto.lavanet.lava.conflict.ConflictRelayData} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.conflict.ConflictRelayData, 1));
};


/** @param {?proto.lavanet.lava.conflict.ConflictRelayData|undefined} value */
proto.lavanet.lava.conflict.ResponseConflict.prototype.setConflictrelaydata0 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lavanet.lava.conflict.ResponseConflict.prototype.clearConflictrelaydata0 = function() {
  this.setConflictrelaydata0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.hasConflictrelaydata0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConflictRelayData conflictRelayData1 = 2;
 * @return {?proto.lavanet.lava.conflict.ConflictRelayData}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.getConflictrelaydata1 = function() {
  return /** @type{?proto.lavanet.lava.conflict.ConflictRelayData} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.conflict.ConflictRelayData, 2));
};


/** @param {?proto.lavanet.lava.conflict.ConflictRelayData|undefined} value */
proto.lavanet.lava.conflict.ResponseConflict.prototype.setConflictrelaydata1 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lavanet.lava.conflict.ResponseConflict.prototype.clearConflictrelaydata1 = function() {
  this.setConflictrelaydata1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.ResponseConflict.prototype.hasConflictrelaydata1 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.conflict.ConflictRelayData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.conflict.ConflictRelayData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.conflict.ConflictRelayData.displayName = 'proto.lavanet.lava.conflict.ConflictRelayData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.conflict.ConflictRelayData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.conflict.ConflictRelayData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ConflictRelayData.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && lavanet_lava_pairing_relay_pb.RelayRequest.toObject(includeInstance, f),
    reply: (f = msg.getReply()) && proto.lavanet.lava.conflict.ReplyMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.conflict.ConflictRelayData}
 */
proto.lavanet.lava.conflict.ConflictRelayData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.conflict.ConflictRelayData;
  return proto.lavanet.lava.conflict.ConflictRelayData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.conflict.ConflictRelayData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.conflict.ConflictRelayData}
 */
proto.lavanet.lava.conflict.ConflictRelayData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lavanet_lava_pairing_relay_pb.RelayRequest;
      reader.readMessage(value,lavanet_lava_pairing_relay_pb.RelayRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new proto.lavanet.lava.conflict.ReplyMetadata;
      reader.readMessage(value,proto.lavanet.lava.conflict.ReplyMetadata.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.conflict.ConflictRelayData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.conflict.ConflictRelayData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ConflictRelayData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lavanet_lava_pairing_relay_pb.RelayRequest.serializeBinaryToWriter
    );
  }
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lavanet.lava.conflict.ReplyMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional lavanet.lava.pairing.RelayRequest request = 1;
 * @return {?proto.lavanet.lava.pairing.RelayRequest}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.getRequest = function() {
  return /** @type{?proto.lavanet.lava.pairing.RelayRequest} */ (
    jspb.Message.getWrapperField(this, lavanet_lava_pairing_relay_pb.RelayRequest, 1));
};


/** @param {?proto.lavanet.lava.pairing.RelayRequest|undefined} value */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lavanet.lava.conflict.ConflictRelayData.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReplyMetadata reply = 3;
 * @return {?proto.lavanet.lava.conflict.ReplyMetadata}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.getReply = function() {
  return /** @type{?proto.lavanet.lava.conflict.ReplyMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lavanet.lava.conflict.ReplyMetadata, 3));
};


/** @param {?proto.lavanet.lava.conflict.ReplyMetadata|undefined} value */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.setReply = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lavanet.lava.conflict.ConflictRelayData.prototype.clearReply = function() {
  this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.ConflictRelayData.prototype.hasReply = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.conflict.ReplyMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.conflict.ReplyMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.conflict.ReplyMetadata.displayName = 'proto.lavanet.lava.conflict.ReplyMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.conflict.ReplyMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.conflict.ReplyMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ReplyMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashAllDataHash: msg.getHashAllDataHash_asB64(),
    sig: msg.getSig_asB64(),
    latestBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    finalizedBlocksHashes: msg.getFinalizedBlocksHashes_asB64(),
    sigBlocks: msg.getSigBlocks_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.conflict.ReplyMetadata}
 */
proto.lavanet.lava.conflict.ReplyMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.conflict.ReplyMetadata;
  return proto.lavanet.lava.conflict.ReplyMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.conflict.ReplyMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.conflict.ReplyMetadata}
 */
proto.lavanet.lava.conflict.ReplyMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHashAllDataHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestBlock(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFinalizedBlocksHashes(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.conflict.ReplyMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.conflict.ReplyMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.ReplyMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashAllDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLatestBlock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFinalizedBlocksHashes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSigBlocks_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes hash_all_data_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getHashAllDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash_all_data_hash = 1;
 * This is a type-conversion wrapper around `getHashAllDataHash()`
 * @return {string}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getHashAllDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHashAllDataHash()));
};


/**
 * optional bytes hash_all_data_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashAllDataHash()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getHashAllDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHashAllDataHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.setHashAllDataHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig = 2;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 latest_block = 3;
 * @return {number}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getLatestBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.setLatestBlock = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes finalized_blocks_hashes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getFinalizedBlocksHashes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes finalized_blocks_hashes = 4;
 * This is a type-conversion wrapper around `getFinalizedBlocksHashes()`
 * @return {string}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getFinalizedBlocksHashes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFinalizedBlocksHashes()));
};


/**
 * optional bytes finalized_blocks_hashes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFinalizedBlocksHashes()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getFinalizedBlocksHashes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFinalizedBlocksHashes()));
};


/** @param {!(string|Uint8Array)} value */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.setFinalizedBlocksHashes = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes sig_blocks = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSigBlocks = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sig_blocks = 5;
 * This is a type-conversion wrapper around `getSigBlocks()`
 * @return {string}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSigBlocks_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigBlocks()));
};


/**
 * optional bytes sig_blocks = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigBlocks()`
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.getSigBlocks_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigBlocks()));
};


/** @param {!(string|Uint8Array)} value */
proto.lavanet.lava.conflict.ReplyMetadata.prototype.setSigBlocks = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lavanet.lava.conflict.FinalizationConflict = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lavanet.lava.conflict.FinalizationConflict, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lavanet.lava.conflict.FinalizationConflict.displayName = 'proto.lavanet.lava.conflict.FinalizationConflict';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.toObject = function(opt_includeInstance) {
  return proto.lavanet.lava.conflict.FinalizationConflict.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lavanet.lava.conflict.FinalizationConflict} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.FinalizationConflict.toObject = function(includeInstance, msg) {
  var f, obj = {
    relayreply0: (f = msg.getRelayreply0()) && lavanet_lava_pairing_relay_pb.RelayReply.toObject(includeInstance, f),
    relayreply1: (f = msg.getRelayreply1()) && lavanet_lava_pairing_relay_pb.RelayReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lavanet.lava.conflict.FinalizationConflict}
 */
proto.lavanet.lava.conflict.FinalizationConflict.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lavanet.lava.conflict.FinalizationConflict;
  return proto.lavanet.lava.conflict.FinalizationConflict.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lavanet.lava.conflict.FinalizationConflict} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lavanet.lava.conflict.FinalizationConflict}
 */
proto.lavanet.lava.conflict.FinalizationConflict.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lavanet_lava_pairing_relay_pb.RelayReply;
      reader.readMessage(value,lavanet_lava_pairing_relay_pb.RelayReply.deserializeBinaryFromReader);
      msg.setRelayreply0(value);
      break;
    case 2:
      var value = new lavanet_lava_pairing_relay_pb.RelayReply;
      reader.readMessage(value,lavanet_lava_pairing_relay_pb.RelayReply.deserializeBinaryFromReader);
      msg.setRelayreply1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lavanet.lava.conflict.FinalizationConflict.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lavanet.lava.conflict.FinalizationConflict} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lavanet.lava.conflict.FinalizationConflict.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelayreply0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lavanet_lava_pairing_relay_pb.RelayReply.serializeBinaryToWriter
    );
  }
  f = message.getRelayreply1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lavanet_lava_pairing_relay_pb.RelayReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional lavanet.lava.pairing.RelayReply relayReply0 = 1;
 * @return {?proto.lavanet.lava.pairing.RelayReply}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.getRelayreply0 = function() {
  return /** @type{?proto.lavanet.lava.pairing.RelayReply} */ (
    jspb.Message.getWrapperField(this, lavanet_lava_pairing_relay_pb.RelayReply, 1));
};


/** @param {?proto.lavanet.lava.pairing.RelayReply|undefined} value */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.setRelayreply0 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lavanet.lava.conflict.FinalizationConflict.prototype.clearRelayreply0 = function() {
  this.setRelayreply0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.hasRelayreply0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional lavanet.lava.pairing.RelayReply relayReply1 = 2;
 * @return {?proto.lavanet.lava.pairing.RelayReply}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.getRelayreply1 = function() {
  return /** @type{?proto.lavanet.lava.pairing.RelayReply} */ (
    jspb.Message.getWrapperField(this, lavanet_lava_pairing_relay_pb.RelayReply, 2));
};


/** @param {?proto.lavanet.lava.pairing.RelayReply|undefined} value */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.setRelayreply1 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lavanet.lava.conflict.FinalizationConflict.prototype.clearRelayreply1 = function() {
  this.setRelayreply1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lavanet.lava.conflict.FinalizationConflict.prototype.hasRelayreply1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.lavanet.lava.conflict);
